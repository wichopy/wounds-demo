// Generated by https://quicktype.io

// Converts JSON strings to/from your types
// and asserts the results of JSON.parse at runtime
function toWound(json) {
  return cast(JSON.parse(json), r("Wound"));
}

function woundToJson(value) {
  return JSON.stringify(value, null, 2);
}

function cast(obj, typ) {
  if (!isValid(typ, obj)) {
    throw Error(`Invalid value`);
  }
  return obj;
}

function isValid(typ, val) {
  if (typ === "any") { return true; }
  if (typ === null) { return val === null; }
  if (typ === false) { return false; }
  while (typeof typ === "object" && typ.ref !== undefined) {
    typ = typeMap[typ.ref];
  }
  if (Array.isArray(typ)) { return isValidEnum(typ, val); }
  if (typeof typ === "object") {
    return typ.hasOwnProperty("unionMembers") ? isValidUnion(typ.unionMembers, val)
      : typ.hasOwnProperty("arrayItems")    ? isValidArray(typ.arrayItems, val)
      : typ.hasOwnProperty("props")         ? isValidObject(typ.props, typ.additional, val)
      : false;
  }
  return isValidPrimitive(typ, val);
}

function isValidPrimitive(typ, val) {
  return typeof typ === typeof val;
}

function isValidUnion(typs, val) {
  // val must validate against one typ in typs
  return typs.some((typ) => isValid(typ, val));
}

function isValidEnum(cases, val) {
  return cases.indexOf(val) !== -1;
}

function isValidArray(typ, val) {
  // val must be an array with no invalid elements
  return Array.isArray(val) && val.every((element) => {
    return isValid(typ, element);
  });
}

function isValidObject(props, additional, val) {
  if (val === null || typeof val !== "object" || Array.isArray(val)) {
    return false;
  }
  return Object.getOwnPropertyNames(val).every((key) => {
    const prop = val[key];
    if (Object.prototype.hasOwnProperty.call(props, key)) {
      return isValid(props[key], prop);
    }
    return isValid(additional, prop);
  });
}

function a(typ) {
  return { arrayItems: typ };
}

function u(...typs) {
  return { unionMembers: typs };
}

function o(props, additional) {
  return { props, additional };
}

function m(additional) {
  return { props: {}, additional };
}

function r(name) {
  return { ref: name };
}

const typeMap = {
  "Wound": o({
    type: "",
    id: 0,
    attributes: r("Attributes"),
  }, false),
  "Attributes": o({
    patientId: 0,
    type: "",
    bodyLocation: "",
    inHouseAcquired: true,
    resolved: true,
    imageUrl: "",
    createdAt: "",
    updatedAt: "",
  }, false),
};

module.exports = {
  "woundToJson": woundToJson,
  "toWound": toWound,
};
